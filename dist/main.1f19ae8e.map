{"version":3,"sources":["vdom/createElement.js","vdom/render.js","vdom/mount.js","vdom/diff.js","main.js"],"names":["tagName","attrs","children","renderElem","$el","document","createElement","Object","entries","k","v","setAttribute","child","appendChild","render","vNode","createTextNode","$node","$target","replaceWith","zip","xs","ys","zipped","i","Math","min","length","push","diffAttrs","oldAttrs","newAttrs","patches","removeAttribute","patch","diffChildren","oldVChildren","newVChildren","childPatches","forEach","oldVChild","diff","additionalPatches","additionalVChild","slice","$parent","childNodes","$child","oldVTree","newVTree","undefined","remove","$newNode","patchAttrs","patchChildren","createVApp","count","id","dataCount","String","Array","from","src","vApp","$app","$rootEl","getElementById","setInterval","n","floor","random","vNewApp"],"mappings":"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","file":"main.1f19ae8e.map","sourceRoot":"../src","sourcesContent":["export default (tagName, { attrs = {}, children = [] } = {}) => {\n    return {\n      tagName,\n      attrs,\n      children,\n    };\n  };","const renderElem = ({ tagName, attrs, children}) => {\n    // create the element\n    //   e.g. <div></div>\n    const $el = document.createElement(tagName);\n  \n    // add all attributs as specified in vNode.attrs\n    //   e.g. <div id=\"app\"></div>\n    for (const [k, v] of Object.entries(attrs)) {\n      $el.setAttribute(k, v);\n    }\n  \n    // append all children as specified in vNode.children\n    //   e.g. <div id=\"app\"><img></div>\n    for (const child of children) {\n      $el.appendChild(render(child));\n    }\n  \n    return $el;\n  };\n  \n  const render = (vNode) => {\n    if (typeof vNode === 'string') {\n      return document.createTextNode(vNode);\n    }\n  \n    // we assume everything else to be a virtual element\n    return renderElem(vNode);\n  };\n  \n  export default render;","export default ($node, $target) => {\n    $target.replaceWith($node);\n    return $node;\n  };","import render from './render';\n\n\nconst zip = (xs, ys) => {\n  const zipped = [];\n  for (let i = 0; i < Math.min(xs.length, ys.length); i++) {\n    zipped.push([xs[i], ys[i]]);\n  }\n  return zipped;\n};\n\nconst diffAttrs = (oldAttrs, newAttrs) => {\n  const patches = [];\n\n  // setting newAttrs\n  for (const [k, v] of Object.entries(newAttrs)) {\n    patches.push($node => {\n      $node.setAttribute(k, v);\n      return $node;\n    });\n  }\n\n  // removing attrs\n  for (const k in oldAttrs) {\n    if (!(k in newAttrs)) {\n      patches.push($node => {\n        $node.removeAttribute(k);\n        return $node;\n      });\n    }\n  }\n\n  return $node => {\n    for (const patch of patches) {\n      patch($node);\n    }\n    return $node;\n  };\n};\n\nconst diffChildren = (oldVChildren, newVChildren) => {\n  const childPatches = [];\n  oldVChildren.forEach((oldVChild, i) => {\n    childPatches.push(diff(oldVChild, newVChildren[i]));\n  });\n\n  const additionalPatches = [];\n  for (const additionalVChild of newVChildren.slice(oldVChildren.length)) {\n    additionalPatches.push($node => {\n      $node.appendChild(render(additionalVChild));\n      return $node;\n    });\n  }\n\n  return $parent => {\n    // since childPatches are expecting the $child, not $parent,\n    // we cannot just loop through them and call patch($parent)\n    for (const [patch, $child] of zip(childPatches, $parent.childNodes)) {\n      patch($child);\n    }\n\n    for (const patch of additionalPatches) {\n      patch($parent);\n    }\n    return $parent;\n  };\n};\n\nconst diff = (oldVTree, newVTree) => {\n  // let's assume oldVTree is not undefined!\n  if (newVTree === undefined) {\n    return $node => {\n      $node.remove();\n      // the patch should return the new root node.\n      // since there is none in this case,\n      // we will just return undefined.\n      return undefined;\n    }\n  }\n\n  if (typeof oldVTree === 'string' ||\n    typeof newVTree === 'string') {\n    if (oldVTree !== newVTree) {\n      // could be 2 cases:\n      // 1. both trees are string and they have different values\n      // 2. one of the trees is text node and\n      //    the other one is elem node\n      // Either case, we will just render(newVTree)!\n      return $node => {\n         const $newNode = render(newVTree);\n         $node.replaceWith($newNode);\n         return $newNode;\n       };\n    } else {\n      // this means that both trees are string\n      // and they have the same values\n      return $node => $node;\n    }\n  }\n\n  if (oldVTree.tagName !== newVTree.tagName) {\n    // we assume that they are totally different and \n    // will not attempt to find the differences.\n    // simply render the newVTree and mount it.\n    return $node => {\n      const $newNode = render(newVTree);\n      $node.replaceWith($newNode);\n      return $newNode;\n    };\n  }\n\n  const patchAttrs = diffAttrs(oldVTree.attrs, newVTree.attrs);\n  const patchChildren = diffChildren(oldVTree.children, newVTree.children);\n\n  return $node => {\n    patchAttrs($node);\n    patchChildren($node);\n    return $node;\n  };\n};\n\nexport default diff;\n","import createElement from './vdom/createElement';\nimport render from './vdom/render';\nimport mount from './vdom/mount';\nimport diff from './vdom/diff';\n\n\nconst createVApp = count => createElement('div', {\n  attrs: {\n    id: 'app',\n    dataCount: count, // we use the count here\n  },\n  children: [\n    'The current count is: ',\n    String(count), // and here\n    ...Array.from({ length: count }, () => createElement('img', {\n      attrs: {\n        src: 'https://media.giphy.com/media/cuPm4p4pClZVC/giphy.gif',\n      },\n    })),\n  ],\n});\n\nlet vApp = createVApp(0);\nconst $app = render(vApp);\nlet $rootEl = mount($app, document.getElementById('app'));\n\nsetInterval(() => {\n  const n = Math.floor(Math.random() * 10);\n  const vNewApp = createVApp(n);\n  const patch = diff(vApp, vNewApp);\n\n  // we might replace the whole $rootEl,\n  // so we want the patch will return the new $rootEl\n  $rootEl = patch($rootEl);\n\n  vApp = vNewApp;\n}, 1000);"]}